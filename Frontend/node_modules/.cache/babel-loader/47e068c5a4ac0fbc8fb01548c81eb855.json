{"ast":null,"code":"var _jsxFileName = \"/home/adera/Desktop/AppEngine/Frontend/src/components/Comments/index.js\";\nimport React, { Component } from \"react\";\nimport Comment from \"./Comment\";\nimport \"./Comments.css\";\nimport Comments from \"./Comments\";\nimport { getComments, postComment } from \"../../services/movieService\";\nimport { getCurrentUser } from \"../../services/authService\";\n\nclass index extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = async e => {\n      e.preventDefault();\n\n      try {\n        const {\n          movieId,\n          comment\n        } = this.state;\n        const {\n          user\n        } = await getCurrentUser();\n        console.log(user.username);\n        const posted = await postComment(movieId, comment, user.username);\n        console.log(posted);\n        const refreshComment = \"\";\n        this.setState({\n          comment: refreshComment\n        });\n        await this.populateComments();\n      } catch (ex) {\n        if (ex.response && ex.response.status === 400) {\n          console.log(ex.response.data);\n        }\n      }\n    };\n\n    this.handleChange = ({\n      currentTarget: input\n    }) => {\n      let comment = this.state.comment;\n      comment = input.value;\n      console.log(comment);\n      this.setState({\n        comment\n      });\n    };\n\n    this.state = {\n      comment: \"\",\n      comments: [],\n      movieId: this.props.movieId\n    };\n  }\n\n  async populateComments() {\n    const {\n      data: results\n    } = await getComments(this.state.movieId);\n    const comments = results.reverse();\n    console.log(comments);\n    this.setState({\n      comments\n    });\n  }\n\n  async componentDidMount() {\n    await this.populateComments();\n  }\n\n  render() {\n    const {\n      comment,\n      comments\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container mx-auto mt-4 comments\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(Comment, {\n      comment: comment,\n      handleChange: this.handleChange,\n      handleSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(Comments, {\n      comments: comments,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 5\n      }\n    }));\n  }\n\n}\n\nexport default index;","map":{"version":3,"sources":["/home/adera/Desktop/AppEngine/Frontend/src/components/Comments/index.js"],"names":["React","Component","Comment","Comments","getComments","postComment","getCurrentUser","index","constructor","props","handleSubmit","e","preventDefault","movieId","comment","state","user","console","log","username","posted","refreshComment","setState","populateComments","ex","response","status","data","handleChange","currentTarget","input","value","comments","results","reverse","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAO,gBAAP;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,6BAAzC;AACA,SAASC,cAAT,QAA+B,4BAA/B;;AAEA,MAAMC,KAAN,SAAoBN,SAApB,CAA8B;AAC7BO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;;AADkB,SAqBnBC,YArBmB,GAqBJ,MAAMC,CAAN,IAAW;AACzBA,MAAAA,CAAC,CAACC,cAAF;;AAEA,UAAI;AACH,cAAM;AAAEC,UAAAA,OAAF;AAAWC,UAAAA;AAAX,YAAuB,KAAKC,KAAlC;AACA,cAAM;AAAEC,UAAAA;AAAF,YAAW,MAAMV,cAAc,EAArC;AACAW,QAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,QAAjB;AACA,cAAMC,MAAM,GAAG,MAAMf,WAAW,CAACQ,OAAD,EAAUC,OAAV,EAAmBE,IAAI,CAACG,QAAxB,CAAhC;AACAF,QAAAA,OAAO,CAACC,GAAR,CAAYE,MAAZ;AACA,cAAMC,cAAc,GAAG,EAAvB;AACA,aAAKC,QAAL,CAAc;AAAER,UAAAA,OAAO,EAAEO;AAAX,SAAd;AAEA,cAAM,KAAKE,gBAAL,EAAN;AACA,OAVD,CAUE,OAAOC,EAAP,EAAW;AACZ,YAAIA,EAAE,CAACC,QAAH,IAAeD,EAAE,CAACC,QAAH,CAAYC,MAAZ,KAAuB,GAA1C,EAA+C;AAC9CT,UAAAA,OAAO,CAACC,GAAR,CAAYM,EAAE,CAACC,QAAH,CAAYE,IAAxB;AACA;AACD;AACD,KAvCkB;;AAAA,SAyCnBC,YAzCmB,GAyCJ,CAAC;AAAEC,MAAAA,aAAa,EAAEC;AAAjB,KAAD,KAA8B;AAC5C,UAAIhB,OAAO,GAAG,KAAKC,KAAL,CAAWD,OAAzB;AACAA,MAAAA,OAAO,GAAGgB,KAAK,CAACC,KAAhB;AACAd,MAAAA,OAAO,CAACC,GAAR,CAAYJ,OAAZ;AACA,WAAKQ,QAAL,CAAc;AAAER,QAAAA;AAAF,OAAd;AACA,KA9CkB;;AAGlB,SAAKC,KAAL,GAAa;AACZD,MAAAA,OAAO,EAAE,EADG;AAEZkB,MAAAA,QAAQ,EAAE,EAFE;AAGZnB,MAAAA,OAAO,EAAE,KAAKJ,KAAL,CAAWI;AAHR,KAAb;AAKA;;AAED,QAAMU,gBAAN,GAAyB;AACxB,UAAM;AAAEI,MAAAA,IAAI,EAAEM;AAAR,QAAoB,MAAM7B,WAAW,CAAC,KAAKW,KAAL,CAAWF,OAAZ,CAA3C;AACA,UAAMmB,QAAQ,GAAGC,OAAO,CAACC,OAAR,EAAjB;AACAjB,IAAAA,OAAO,CAACC,GAAR,CAAYc,QAAZ;AACA,SAAKV,QAAL,CAAc;AAAEU,MAAAA;AAAF,KAAd;AACA;;AAED,QAAMG,iBAAN,GAA0B;AACzB,UAAM,KAAKZ,gBAAL,EAAN;AACA;;AA6BDa,EAAAA,MAAM,GAAG;AACR,UAAM;AAAEtB,MAAAA,OAAF;AAAWkB,MAAAA;AAAX,QAAwB,KAAKjB,KAAnC;AACA,wBACC;AAAK,MAAA,SAAS,EAAC,iCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACC,oBAAC,OAAD;AACC,MAAA,OAAO,EAAED,OADV;AAEC,MAAA,YAAY,EAAE,KAAKc,YAFpB;AAGC,MAAA,YAAY,EAAE,KAAKlB,YAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,eAMC,oBAAC,QAAD;AAAU,MAAA,QAAQ,EAAEsB,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAND,CADD;AAUA;;AA7D4B;;AAgE9B,eAAezB,KAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Comment from \"./Comment\";\nimport \"./Comments.css\";\nimport Comments from \"./Comments\";\nimport { getComments, postComment } from \"../../services/movieService\";\nimport { getCurrentUser } from \"../../services/authService\";\n\nclass index extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tcomment: \"\",\n\t\t\tcomments: [],\n\t\t\tmovieId: this.props.movieId\n\t\t};\n\t}\n\n\tasync populateComments() {\n\t\tconst { data: results } = await getComments(this.state.movieId);\n\t\tconst comments = results.reverse();\n\t\tconsole.log(comments)\n\t\tthis.setState({ comments });\n\t}\n\n\tasync componentDidMount() {\n\t\tawait this.populateComments();\n\t}\n\n\thandleSubmit = async e => {\n\t\te.preventDefault();\n\n\t\ttry {\n\t\t\tconst { movieId, comment } = this.state;\n\t\t\tconst { user } = await getCurrentUser();\n\t\t\tconsole.log(user.username);\n\t\t\tconst posted = await postComment(movieId, comment, user.username);\n\t\t\tconsole.log(posted);\n\t\t\tconst refreshComment = \"\";\n\t\t\tthis.setState({ comment: refreshComment });\n\n\t\t\tawait this.populateComments();\n\t\t} catch (ex) {\n\t\t\tif (ex.response && ex.response.status === 400) {\n\t\t\t\tconsole.log(ex.response.data);\n\t\t\t}\n\t\t}\n\t};\n\n\thandleChange = ({ currentTarget: input }) => {\n\t\tlet comment = this.state.comment;\n\t\tcomment = input.value;\n\t\tconsole.log(comment);\n\t\tthis.setState({ comment });\n\t};\n\n\trender() {\n\t\tconst { comment, comments } = this.state;\n\t\treturn (\n\t\t\t<div className='container mx-auto mt-4 comments'>\n\t\t\t\t<Comment\n\t\t\t\t\tcomment={comment}\n\t\t\t\t\thandleChange={this.handleChange}\n\t\t\t\t\thandleSubmit={this.handleSubmit}\n\t\t\t\t/>\n\t\t\t\t<Comments comments={comments} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default index;\n"]},"metadata":{},"sourceType":"module"}